-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pool2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImage_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    inputImage_ce0 : OUT STD_LOGIC;
    inputImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputImage_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    outputImage_ce0 : OUT STD_LOGIC;
    outputImage_we0 : OUT STD_LOGIC;
    outputImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of pool2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_167_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_415 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_cast_fu_181_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_reg_420 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_191_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_18_cast_fu_206_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_cast_reg_433 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_214_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_438 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_fu_226_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_446 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputImage_addr_reg_456 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_8_fu_261_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_reg_466 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_1_fu_277_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_1_reg_474 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_s_fu_283_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_reg_479 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_1_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_1_reg_487 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal maximum_3_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_15_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal maximum_2_fu_405_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_reg_75 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_87 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_99 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_reg_111 : STD_LOGIC_VECTOR (1 downto 0);
    signal maximum1_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_133 : STD_LOGIC_VECTOR (1 downto 0);
    signal maximum_1_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_173_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_cast_fu_197_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_201_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_236_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_cast_fu_232_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_cast_fu_267_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_cast_fu_288_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_304_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_309_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal maximum_3_to_int_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal maximum_1_to_int_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_326_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_336_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_354_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component mnist_fcmp_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mnist_fcmp_32ns_3eOg_x_U15 : component mnist_fcmp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => maximum_3_reg_497,
        din1 => maximum_1_reg_144,
        opcode => ap_const_lv5_2,
        dout => tmp_15_fu_156_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((ap_const_lv1_0 = exitcond_fu_292_p2)))) then 
                a_reg_111 <= a_1_reg_474;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                a_reg_111 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    b_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_271_p2))) then 
                b_reg_133 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                b_reg_133 <= b_1_reg_487;
            end if; 
        end if;
    end process;

    i_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond3_fu_185_p2)))) then 
                i_reg_75 <= i_1_reg_415;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_75 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond2_fu_220_p2)))) then 
                j_reg_87 <= j_1_reg_428;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond4_fu_161_p2 = ap_const_lv1_0))) then 
                j_reg_87 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_185_p2))) then 
                k_reg_99 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond1_fu_271_p2)))) then 
                k_reg_99 <= k_1_reg_446;
            end if; 
        end if;
    end process;

    maximum1_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7) and not((ap_const_lv1_0 = exitcond_fu_292_p2)))) then 
                maximum1_reg_122 <= maximum_1_reg_144;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                maximum1_reg_122 <= inputImage_q0;
            end if; 
        end if;
    end process;

    maximum_1_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_271_p2))) then 
                maximum_1_reg_144 <= maximum1_reg_122;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                maximum_1_reg_144 <= maximum_2_fu_405_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                a_1_reg_474 <= a_1_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then
                b_1_reg_487 <= b_1_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_1_reg_415 <= i_1_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                j_1_reg_428 <= j_1_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                k_1_reg_446 <= k_1_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                maximum_3_reg_497 <= inputImage_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_220_p2))) then
                outputImage_addr_reg_456 <= tmp_22_cast_fu_256_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                tmp_15_reg_504 <= tmp_15_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_185_p2))) then
                    tmp_18_cast_reg_433(6 downto 2) <= tmp_18_cast_fu_206_p3(6 downto 2);
                    tmp_1_reg_438(2 downto 1) <= tmp_1_fu_214_p2(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond4_fu_161_p2 = ap_const_lv1_0))) then
                    tmp_1_cast_reg_420(3 downto 2) <= tmp_1_cast_fu_181_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                    tmp_8_reg_466(2 downto 1) <= tmp_8_fu_261_p2(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond1_fu_271_p2))) then
                tmp_s_reg_479 <= tmp_s_fu_283_p2;
            end if;
        end if;
    end process;
    tmp_1_cast_reg_420(1 downto 0) <= "00";
    tmp_1_cast_reg_420(4) <= '0';
    tmp_18_cast_reg_433(1 downto 0) <= "00";
    tmp_1_reg_438(0) <= '0';
    tmp_8_reg_466(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_161_p2, exitcond3_fu_185_p2, exitcond2_fu_220_p2, exitcond1_fu_271_p2, exitcond_fu_292_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond4_fu_161_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_185_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_220_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_271_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (not((ap_const_lv1_0 = exitcond_fu_292_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    a_1_fu_277_p2 <= std_logic_vector(unsigned(a_reg_111) + unsigned(ap_const_lv2_1));
    a_cast_fu_267_p1 <= std_logic_vector(resize(unsigned(a_reg_111),3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_161_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond4_fu_161_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_161_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond4_fu_161_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_1_fu_298_p2 <= std_logic_vector(unsigned(b_reg_133) + unsigned(ap_const_lv2_1));
    b_cast_fu_288_p1 <= std_logic_vector(resize(unsigned(b_reg_133),3));
    exitcond1_fu_271_p2 <= "1" when (a_reg_111 = ap_const_lv2_2) else "0";
    exitcond2_fu_220_p2 <= "1" when (k_reg_99 = ap_const_lv3_4) else "0";
    exitcond3_fu_185_p2 <= "1" when (j_reg_87 = ap_const_lv3_4) else "0";
    exitcond4_fu_161_p2 <= "1" when (i_reg_75 = ap_const_lv2_3) else "0";
    exitcond_fu_292_p2 <= "1" when (b_reg_133 = ap_const_lv2_2) else "0";
    i_1_fu_167_p2 <= std_logic_vector(unsigned(i_reg_75) + unsigned(ap_const_lv2_1));

    inputImage_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, tmp_5_fu_246_p1, tmp_11_fu_318_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
            inputImage_address0 <= tmp_11_fu_318_p1(8 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            inputImage_address0 <= tmp_5_fu_246_p1(8 - 1 downto 0);
        else 
            inputImage_address0 <= "XXXXXXXX";
        end if; 
    end process;


    inputImage_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state7)))) then 
            inputImage_ce0 <= ap_const_logic_1;
        else 
            inputImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_191_p2 <= std_logic_vector(unsigned(j_reg_87) + unsigned(ap_const_lv3_1));
    k_1_fu_226_p2 <= std_logic_vector(unsigned(k_reg_99) + unsigned(ap_const_lv3_1));
    maximum_1_to_int_fu_340_p1 <= maximum_1_reg_144;
    maximum_2_fu_405_p3 <= 
        maximum_3_reg_497 when (tmp_16_fu_400_p2(0) = '1') else 
        maximum_1_reg_144;
    maximum_3_to_int_fu_323_p1 <= maximum_3_reg_497;
    notlhs4_fu_376_p2 <= "0" when (tmp_10_fu_344_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_358_p2 <= "0" when (tmp_6_fu_326_p4 = ap_const_lv8_FF) else "1";
    notrhs5_fu_382_p2 <= "1" when (tmp_18_fu_354_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_364_p2 <= "1" when (tmp_17_fu_336_p1 = ap_const_lv23_0) else "0";
    outputImage_address0 <= outputImage_addr_reg_456;

    outputImage_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            outputImage_ce0 <= ap_const_logic_1;
        else 
            outputImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outputImage_d0 <= maximum1_reg_122;

    outputImage_we0_assign_proc : process(ap_CS_fsm_state6, exitcond1_fu_271_p2)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond1_fu_271_p2))))) then 
            outputImage_we0 <= ap_const_logic_1;
        else 
            outputImage_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_344_p4 <= maximum_1_to_int_fu_340_p1(30 downto 23);
    tmp_11_fu_318_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_309_p4),64));
    tmp_12_fu_370_p2 <= (notrhs_fu_364_p2 or notlhs_fu_358_p2);
    tmp_13_fu_388_p2 <= (notrhs5_fu_382_p2 or notlhs4_fu_376_p2);
    tmp_14_fu_394_p2 <= (tmp_12_fu_370_p2 and tmp_13_fu_388_p2);
    tmp_16_fu_400_p2 <= (tmp_14_fu_394_p2 and tmp_15_reg_504);
    tmp_17_fu_336_p1 <= maximum_3_to_int_fu_323_p1(23 - 1 downto 0);
    tmp_18_cast_fu_206_p3 <= (tmp_3_fu_201_p2 & ap_const_lv2_0);
    tmp_18_fu_354_p1 <= maximum_1_to_int_fu_340_p1(23 - 1 downto 0);
    tmp_1_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(tmp_fu_173_p3),5));
    tmp_1_fu_214_p2 <= std_logic_vector(shift_left(unsigned(j_reg_87),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    tmp_22_cast_fu_256_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_251_p2),64));
    tmp_2_fu_304_p2 <= std_logic_vector(unsigned(b_cast_fu_288_p1) + unsigned(tmp_8_reg_466));
    tmp_3_fu_201_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_197_p1) + unsigned(tmp_1_cast_reg_420));
    tmp_4_cast_fu_197_p1 <= std_logic_vector(resize(unsigned(j_reg_87),5));
    tmp_4_fu_236_p4 <= ((i_reg_75 & j_reg_87) & k_reg_99);
    tmp_5_fu_246_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_236_p4),64));
    tmp_6_fu_326_p4 <= maximum_3_to_int_fu_323_p1(30 downto 23);
    tmp_7_cast_fu_232_p1 <= std_logic_vector(resize(unsigned(k_reg_99),7));
    tmp_7_fu_251_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_232_p1) + unsigned(tmp_18_cast_reg_433));
    tmp_8_fu_261_p2 <= std_logic_vector(shift_left(unsigned(k_reg_99),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    tmp_9_fu_309_p4 <= ((i_reg_75 & tmp_s_reg_479) & tmp_2_fu_304_p2);
    tmp_fu_173_p3 <= (i_reg_75 & ap_const_lv2_0);
    tmp_s_fu_283_p2 <= std_logic_vector(unsigned(tmp_1_reg_438) + unsigned(a_cast_fu_267_p1));
end behav;
