-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mnist is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mnist is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mnist,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.412000,HLS_SYN_LAT=91840,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=17,HLS_SYN_FF=2802,HLS_SYN_LUT=4437}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inputImage_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputVector_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal outputVector_ce0 : STD_LOGIC;
    signal outputVector_we0 : STD_LOGIC;
    signal ip1Biases_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ip1Biases_ce0 : STD_LOGIC;
    signal ip1Biases_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ip1Weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ip1Weights_ce0 : STD_LOGIC;
    signal ip1Weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2Biases_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ip2Biases_ce0 : STD_LOGIC;
    signal ip2Biases_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ip2Weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ip2Weights_ce0 : STD_LOGIC;
    signal ip2Weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal i_2_fu_408_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_645 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond1_i_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ip1Output_addr_reg_655 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_444_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_reg_660 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_fu_456_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_673 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond_i_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool2Output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_4_fu_487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_701 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_i5_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_reg_706 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i4_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ip1Output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ip1Output_load_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal p_ip1Output_load_fu_539_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ip1Output_load_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_5_fu_552_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_731 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond1_i1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputVector_assign_1_17_reg_741 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_36_fu_588_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_36_reg_746 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal j_2_fu_600_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_759 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal exitcond_i1_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal relu1Output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal i_3_fu_631_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_787 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_792 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv1Output_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv1Output_0_ce0 : STD_LOGIC;
    signal conv1Output_0_we0 : STD_LOGIC;
    signal conv1Output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1Output_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal pool1Output_0_ce0 : STD_LOGIC;
    signal pool1Output_0_we0 : STD_LOGIC;
    signal pool1Output_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2Output_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv2Output_ce0 : STD_LOGIC;
    signal conv2Output_we0 : STD_LOGIC;
    signal conv2Output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2Output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool2Output_ce0 : STD_LOGIC;
    signal pool2Output_we0 : STD_LOGIC;
    signal ip1Output_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ip1Output_ce0 : STD_LOGIC;
    signal ip1Output_we0 : STD_LOGIC;
    signal relu1Output_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal relu1Output_ce0 : STD_LOGIC;
    signal relu1Output_we0 : STD_LOGIC;
    signal outputVector_assign_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal outputVector_assign_1_ce0 : STD_LOGIC;
    signal outputVector_assign_1_we0 : STD_LOGIC;
    signal outputVector_assign_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv1_fu_342_ap_start : STD_LOGIC;
    signal grp_conv1_fu_342_ap_done : STD_LOGIC;
    signal grp_conv1_fu_342_ap_idle : STD_LOGIC;
    signal grp_conv1_fu_342_ap_ready : STD_LOGIC;
    signal grp_conv1_fu_342_inputImage_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv1_fu_342_inputImage_ce0 : STD_LOGIC;
    signal grp_conv1_fu_342_outputImage_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv1_fu_342_outputImage_0_ce0 : STD_LOGIC;
    signal grp_conv1_fu_342_outputImage_0_we0 : STD_LOGIC;
    signal grp_conv1_fu_342_outputImage_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv2_fu_352_ap_start : STD_LOGIC;
    signal grp_conv2_fu_352_ap_done : STD_LOGIC;
    signal grp_conv2_fu_352_ap_idle : STD_LOGIC;
    signal grp_conv2_fu_352_ap_ready : STD_LOGIC;
    signal grp_conv2_fu_352_inputImage_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_conv2_fu_352_inputImage_0_ce0 : STD_LOGIC;
    signal grp_conv2_fu_352_outputImage_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv2_fu_352_outputImage_ce0 : STD_LOGIC;
    signal grp_conv2_fu_352_outputImage_we0 : STD_LOGIC;
    signal grp_conv2_fu_352_outputImage_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool1_fu_360_ap_start : STD_LOGIC;
    signal grp_pool1_fu_360_ap_done : STD_LOGIC;
    signal grp_pool1_fu_360_ap_idle : STD_LOGIC;
    signal grp_pool1_fu_360_ap_ready : STD_LOGIC;
    signal grp_pool1_fu_360_inputImage_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pool1_fu_360_inputImage_0_ce0 : STD_LOGIC;
    signal grp_pool1_fu_360_outputImage_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_pool1_fu_360_outputImage_0_ce0 : STD_LOGIC;
    signal grp_pool1_fu_360_outputImage_0_we0 : STD_LOGIC;
    signal grp_pool1_fu_360_outputImage_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool2_fu_366_ap_start : STD_LOGIC;
    signal grp_pool2_fu_366_ap_done : STD_LOGIC;
    signal grp_pool2_fu_366_ap_idle : STD_LOGIC;
    signal grp_pool2_fu_366_ap_ready : STD_LOGIC;
    signal grp_pool2_fu_366_inputImage_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pool2_fu_366_inputImage_ce0 : STD_LOGIC;
    signal grp_pool2_fu_366_outputImage_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pool2_fu_366_outputImage_ce0 : STD_LOGIC;
    signal grp_pool2_fu_366_outputImage_we0 : STD_LOGIC;
    signal grp_pool2_fu_366_outputImage_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_252 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal storemerge_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_reg_275 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_i3_reg_286 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_i9_reg_297 : STD_LOGIC_VECTOR (3 downto 0);
    signal storemerge4_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i1_reg_320 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_331 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_reg_grp_conv1_fu_342_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_reg_grp_conv2_fu_352_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_reg_grp_pool1_fu_360_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_reg_grp_pool2_fu_366_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_i_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i1_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_372_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_378_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_420_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_432_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_428_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_440_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_i_cast_fu_467_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_fu_471_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal outputVector_assign_s_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_501_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_511_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_564_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_35_fu_576_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_572_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_584_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_i1_cast_fu_611_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_37_fu_615_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);

    component conv1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputImage_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inputImage_ce0 : OUT STD_LOGIC;
        inputImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputImage_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        outputImage_0_ce0 : OUT STD_LOGIC;
        outputImage_0_we0 : OUT STD_LOGIC;
        outputImage_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputImage_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        inputImage_0_ce0 : OUT STD_LOGIC;
        inputImage_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputImage_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        outputImage_ce0 : OUT STD_LOGIC;
        outputImage_we0 : OUT STD_LOGIC;
        outputImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pool1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputImage_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputImage_0_ce0 : OUT STD_LOGIC;
        inputImage_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputImage_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        outputImage_0_ce0 : OUT STD_LOGIC;
        outputImage_0_we0 : OUT STD_LOGIC;
        outputImage_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pool2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputImage_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        inputImage_ce0 : OUT STD_LOGIC;
        inputImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        outputImage_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        outputImage_ce0 : OUT STD_LOGIC;
        outputImage_we0 : OUT STD_LOGIC;
        outputImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_fadd_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_fmul_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_fcmp_32ns_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mnist_ip1Biases IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_ip1Weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_ip2Biases IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_ip2Weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_conv1Output_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_pool1Output_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_conv2Output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_pool2Output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_ip1Output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_outputVectog8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        inputImage_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        inputImage_ce0 : IN STD_LOGIC;
        inputImage_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputVector_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        outputVector_ce0 : IN STD_LOGIC;
        outputVector_we0 : IN STD_LOGIC;
        outputVector_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ip1Biases_U : component mnist_ip1Biases
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ip1Biases_address0,
        ce0 => ip1Biases_ce0,
        q0 => ip1Biases_q0);

    ip1Weights_U : component mnist_ip1Weights
    generic map (
        DataWidth => 32,
        AddressRange => 1440,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ip1Weights_address0,
        ce0 => ip1Weights_ce0,
        q0 => ip1Weights_q0);

    ip2Biases_U : component mnist_ip2Biases
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ip2Biases_address0,
        ce0 => ip2Biases_ce0,
        q0 => ip2Biases_q0);

    ip2Weights_U : component mnist_ip2Weights
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ip2Weights_address0,
        ce0 => ip2Weights_ce0,
        q0 => ip2Weights_q0);

    mnist_AXILiteS_s_axi_U : component mnist_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        inputImage_address0 => grp_conv1_fu_342_inputImage_address0,
        inputImage_ce0 => grp_conv1_fu_342_inputImage_ce0,
        inputImage_q0 => inputImage_q0,
        outputVector_address0 => outputVector_address0,
        outputVector_ce0 => outputVector_ce0,
        outputVector_we0 => outputVector_we0,
        outputVector_d0 => outputVector_assign_1_q0);

    conv1Output_0_U : component mnist_conv1Output_0
    generic map (
        DataWidth => 32,
        AddressRange => 169,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv1Output_0_address0,
        ce0 => conv1Output_0_ce0,
        we0 => conv1Output_0_we0,
        d0 => grp_conv1_fu_342_outputImage_0_d0,
        q0 => conv1Output_0_q0);

    pool1Output_0_U : component mnist_pool1Output_0
    generic map (
        DataWidth => 32,
        AddressRange => 121,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pool1Output_0_address0,
        ce0 => pool1Output_0_ce0,
        we0 => pool1Output_0_we0,
        d0 => grp_pool1_fu_360_outputImage_0_d0,
        q0 => pool1Output_0_q0);

    conv2Output_U : component mnist_conv2Output
    generic map (
        DataWidth => 32,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv2Output_address0,
        ce0 => conv2Output_ce0,
        we0 => conv2Output_we0,
        d0 => grp_conv2_fu_352_outputImage_d0,
        q0 => conv2Output_q0);

    pool2Output_U : component mnist_pool2Output
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pool2Output_address0,
        ce0 => pool2Output_ce0,
        we0 => pool2Output_we0,
        d0 => grp_pool2_fu_366_outputImage_d0,
        q0 => pool2Output_q0);

    ip1Output_U : component mnist_ip1Output
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ip1Output_address0,
        ce0 => ip1Output_ce0,
        we0 => ip1Output_we0,
        d0 => storemerge_reg_264,
        q0 => ip1Output_q0);

    relu1Output_U : component mnist_ip1Output
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => relu1Output_address0,
        ce0 => relu1Output_ce0,
        we0 => relu1Output_we0,
        d0 => p_ip1Output_load_reg_723,
        q0 => relu1Output_q0);

    outputVector_assign_1_U : component mnist_outputVectog8j
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => outputVector_assign_1_address0,
        ce0 => outputVector_assign_1_ce0,
        we0 => outputVector_assign_1_we0,
        d0 => storemerge4_reg_309,
        q0 => outputVector_assign_1_q0);

    grp_conv1_fu_342 : component conv1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv1_fu_342_ap_start,
        ap_done => grp_conv1_fu_342_ap_done,
        ap_idle => grp_conv1_fu_342_ap_idle,
        ap_ready => grp_conv1_fu_342_ap_ready,
        inputImage_address0 => grp_conv1_fu_342_inputImage_address0,
        inputImage_ce0 => grp_conv1_fu_342_inputImage_ce0,
        inputImage_q0 => inputImage_q0,
        outputImage_0_address0 => grp_conv1_fu_342_outputImage_0_address0,
        outputImage_0_ce0 => grp_conv1_fu_342_outputImage_0_ce0,
        outputImage_0_we0 => grp_conv1_fu_342_outputImage_0_we0,
        outputImage_0_d0 => grp_conv1_fu_342_outputImage_0_d0);

    grp_conv2_fu_352 : component conv2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv2_fu_352_ap_start,
        ap_done => grp_conv2_fu_352_ap_done,
        ap_idle => grp_conv2_fu_352_ap_idle,
        ap_ready => grp_conv2_fu_352_ap_ready,
        inputImage_0_address0 => grp_conv2_fu_352_inputImage_0_address0,
        inputImage_0_ce0 => grp_conv2_fu_352_inputImage_0_ce0,
        inputImage_0_q0 => pool1Output_0_q0,
        outputImage_address0 => grp_conv2_fu_352_outputImage_address0,
        outputImage_ce0 => grp_conv2_fu_352_outputImage_ce0,
        outputImage_we0 => grp_conv2_fu_352_outputImage_we0,
        outputImage_d0 => grp_conv2_fu_352_outputImage_d0);

    grp_pool1_fu_360 : component pool1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pool1_fu_360_ap_start,
        ap_done => grp_pool1_fu_360_ap_done,
        ap_idle => grp_pool1_fu_360_ap_idle,
        ap_ready => grp_pool1_fu_360_ap_ready,
        inputImage_0_address0 => grp_pool1_fu_360_inputImage_0_address0,
        inputImage_0_ce0 => grp_pool1_fu_360_inputImage_0_ce0,
        inputImage_0_q0 => conv1Output_0_q0,
        outputImage_0_address0 => grp_pool1_fu_360_outputImage_0_address0,
        outputImage_0_ce0 => grp_pool1_fu_360_outputImage_0_ce0,
        outputImage_0_we0 => grp_pool1_fu_360_outputImage_0_we0,
        outputImage_0_d0 => grp_pool1_fu_360_outputImage_0_d0);

    grp_pool2_fu_366 : component pool2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pool2_fu_366_ap_start,
        ap_done => grp_pool2_fu_366_ap_done,
        ap_idle => grp_pool2_fu_366_ap_idle,
        ap_ready => grp_pool2_fu_366_ap_ready,
        inputImage_address0 => grp_pool2_fu_366_inputImage_address0,
        inputImage_ce0 => grp_pool2_fu_366_inputImage_ce0,
        inputImage_q0 => conv2Output_q0,
        outputImage_address0 => grp_pool2_fu_366_outputImage_address0,
        outputImage_ce0 => grp_pool2_fu_366_outputImage_ce0,
        outputImage_we0 => grp_pool2_fu_366_outputImage_we0,
        outputImage_d0 => grp_pool2_fu_366_outputImage_d0);

    mnist_fadd_32ns_3cud_x_U18 : component mnist_fadd_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_372_p0,
        din1 => reg_391,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);

    mnist_fmul_32ns_3dEe_x_U19 : component mnist_fmul_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_378_p0,
        din1 => grp_fu_378_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p2);

    mnist_fcmp_32ns_3eOg_x_U20 : component mnist_fcmp_32ns_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => ip1Output_load_reg_716,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_27_fu_386_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_conv1_fu_342_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_conv1_fu_342_ap_start <= ap_const_logic_0;
            else
                if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_grp_conv1_fu_342_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_conv1_fu_342_ap_ready)) then 
                    ap_reg_grp_conv1_fu_342_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_conv2_fu_352_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_conv2_fu_352_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                    ap_reg_grp_conv2_fu_352_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_conv2_fu_352_ap_ready)) then 
                    ap_reg_grp_conv2_fu_352_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool1_fu_360_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_pool1_fu_360_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                    ap_reg_grp_pool1_fu_360_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_pool1_fu_360_ap_ready)) then 
                    ap_reg_grp_pool1_fu_360_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_pool2_fu_366_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_pool2_fu_366_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state7))) then 
                    ap_reg_grp_pool2_fu_366_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_pool2_fu_366_ap_ready)) then 
                    ap_reg_grp_pool2_fu_366_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i3_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((exitcond1_i_fu_402_p2 = ap_const_lv1_0)))) then 
                i_i3_reg_286 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
                i_i3_reg_286 <= i_4_reg_701;
            end if; 
        end if;
    end process;

    i_i9_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and not((ap_const_lv1_0 = exitcond_i4_fu_481_p2)))) then 
                i_i9_reg_297 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state27) and not((ap_const_lv1_0 = exitcond_i1_fu_594_p2)))) then 
                i_i9_reg_297 <= i_5_reg_731;
            end if; 
        end if;
    end process;

    i_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not((ap_const_lv1_0 = exitcond_i_fu_450_p2)))) then 
                i_i_reg_252 <= i_2_reg_645;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state8) and not((ap_const_logic_0 = grp_pool2_fu_366_ap_done)))) then 
                i_i_reg_252 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25) and not((ap_const_lv1_0 = exitcond1_i1_fu_546_p2)))) then 
                i_reg_331 <= ap_const_lv4_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state38))) then 
                i_reg_331 <= i_3_reg_787;
            end if; 
        end if;
    end process;

    j_i1_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36))) then 
                j_i1_reg_320 <= j_2_reg_759;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
                j_i1_reg_320 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                j_i_reg_275 <= j_reg_673;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                j_i_reg_275 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    storemerge4_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36))) then 
                storemerge4_reg_309 <= grp_fu_372_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
                storemerge4_reg_309 <= ip2Biases_q0;
            end if; 
        end if;
    end process;

    storemerge_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                storemerge_reg_264 <= grp_fu_372_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
                storemerge_reg_264 <= ip1Biases_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then
                i_2_reg_645 <= i_2_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state37))) then
                i_3_reg_787 <= i_3_fu_631_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then
                i_4_reg_701 <= i_4_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then
                i_5_reg_731 <= i_5_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and (exitcond1_i_fu_402_p2 = ap_const_lv1_0))) then
                ip1Output_addr_reg_655 <= tmp_i_fu_414_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state22))) then
                ip1Output_load_reg_716 <= ip1Output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then
                j_2_reg_759 <= j_2_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then
                j_reg_673 <= j_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = exitcond1_i1_fu_546_p2))) then
                outputVector_assign_1_17_reg_741 <= tmp_i1_fu_558_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state23))) then
                p_ip1Output_load_reg_723 <= p_ip1Output_load_fu_539_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state15)) or ((ap_const_lv1_1 = ap_CS_fsm_state31)))) then
                reg_391 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                    tmp_31_reg_660(11 downto 4) <= tmp_31_fu_444_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then
                    tmp_36_reg_746(9 downto 1) <= tmp_36_fu_588_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond_i4_fu_481_p2))) then
                    tmp_i5_reg_706(4 downto 0) <= tmp_i5_fu_493_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state37) and (ap_const_lv1_0 = exitcond_fu_625_p2))) then
                    tmp_reg_792(3 downto 0) <= tmp_fu_637_p1(3 downto 0);
            end if;
        end if;
    end process;
    tmp_31_reg_660(3 downto 0) <= "0000";
    tmp_i5_reg_706(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_36_reg_746(0) <= '0';
    tmp_reg_792(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_i_fu_402_p2, exitcond_i_fu_450_p2, exitcond_i4_fu_481_p2, exitcond1_i1_fu_546_p2, exitcond_i1_fu_594_p2, exitcond_fu_625_p2, grp_conv1_fu_342_ap_done, grp_conv2_fu_352_ap_done, grp_pool1_fu_360_ap_done, grp_pool2_fu_366_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_logic_0 = grp_conv1_fu_342_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_logic_0 = grp_pool1_fu_360_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_logic_0 = grp_conv2_fu_352_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (not((ap_const_logic_0 = grp_pool2_fu_366_ap_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (not((exitcond1_i_fu_402_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_450_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state21 => 
                if (not((ap_const_lv1_0 = exitcond_i4_fu_481_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state25 => 
                if (not((ap_const_lv1_0 = exitcond1_i1_fu_546_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (not((ap_const_lv1_0 = exitcond_i1_fu_594_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state37 => 
                if (not((ap_const_lv1_0 = exitcond_fu_625_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21 downto 21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22 downto 22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30 downto 30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state36 <= ap_CS_fsm(35 downto 35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36 downto 36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37 downto 37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state37, exitcond_fu_625_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state37) and not((ap_const_lv1_0 = exitcond_fu_625_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37, exitcond_fu_625_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state37) and not((ap_const_lv1_0 = exitcond_fu_625_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    conv1Output_0_address0_assign_proc : process(grp_conv1_fu_342_outputImage_0_address0, grp_pool1_fu_360_inputImage_0_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            conv1Output_0_address0 <= grp_pool1_fu_360_inputImage_0_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            conv1Output_0_address0 <= grp_conv1_fu_342_outputImage_0_address0;
        else 
            conv1Output_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv1Output_0_ce0_assign_proc : process(grp_conv1_fu_342_outputImage_0_ce0, grp_pool1_fu_360_inputImage_0_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            conv1Output_0_ce0 <= grp_pool1_fu_360_inputImage_0_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            conv1Output_0_ce0 <= grp_conv1_fu_342_outputImage_0_ce0;
        else 
            conv1Output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1Output_0_we0_assign_proc : process(grp_conv1_fu_342_outputImage_0_we0, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            conv1Output_0_we0 <= grp_conv1_fu_342_outputImage_0_we0;
        else 
            conv1Output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2Output_address0_assign_proc : process(grp_conv2_fu_352_outputImage_address0, grp_pool2_fu_366_inputImage_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            conv2Output_address0 <= grp_pool2_fu_366_inputImage_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            conv2Output_address0 <= grp_conv2_fu_352_outputImage_address0;
        else 
            conv2Output_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv2Output_ce0_assign_proc : process(grp_conv2_fu_352_outputImage_ce0, grp_pool2_fu_366_inputImage_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            conv2Output_ce0 <= grp_pool2_fu_366_inputImage_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            conv2Output_ce0 <= grp_conv2_fu_352_outputImage_ce0;
        else 
            conv2Output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2Output_we0_assign_proc : process(grp_conv2_fu_352_outputImage_we0, ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            conv2Output_we0 <= grp_conv2_fu_352_outputImage_we0;
        else 
            conv2Output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i1_fu_546_p2 <= "1" when (i_i9_reg_297 = ap_const_lv4_A) else "0";
    exitcond1_i_fu_402_p2 <= "1" when (i_i_reg_252 = ap_const_lv5_1E) else "0";
    exitcond_fu_625_p2 <= "1" when (i_reg_331 = ap_const_lv4_A) else "0";
    exitcond_i1_fu_594_p2 <= "1" when (j_i1_reg_320 = ap_const_lv5_1E) else "0";
    exitcond_i4_fu_481_p2 <= "1" when (i_i3_reg_286 = ap_const_lv5_1E) else "0";
    exitcond_i_fu_450_p2 <= "1" when (j_i_reg_275 = ap_const_lv6_30) else "0";
    grp_conv1_fu_342_ap_start <= ap_reg_grp_conv1_fu_342_ap_start;
    grp_conv2_fu_352_ap_start <= ap_reg_grp_conv2_fu_352_ap_start;

    grp_fu_372_p0_assign_proc : process(storemerge_reg_264, storemerge4_reg_309, ap_CS_fsm_state16, ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            grp_fu_372_p0 <= storemerge4_reg_309;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            grp_fu_372_p0 <= storemerge_reg_264;
        else 
            grp_fu_372_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_p0_assign_proc : process(pool2Output_q0, ap_CS_fsm_state12, relu1Output_q0, ap_CS_fsm_state28)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            grp_fu_378_p0 <= relu1Output_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_378_p0 <= pool2Output_q0;
        else 
            grp_fu_378_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_378_p1_assign_proc : process(ip1Weights_q0, ip2Weights_q0, ap_CS_fsm_state12, ap_CS_fsm_state28)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            grp_fu_378_p1 <= ip2Weights_q0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            grp_fu_378_p1 <= ip1Weights_q0;
        else 
            grp_fu_378_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pool1_fu_360_ap_start <= ap_reg_grp_pool1_fu_360_ap_start;
    grp_pool2_fu_366_ap_start <= ap_reg_grp_pool2_fu_366_ap_start;
    i_2_fu_408_p2 <= std_logic_vector(unsigned(i_i_reg_252) + unsigned(ap_const_lv5_1));
    i_3_fu_631_p2 <= std_logic_vector(unsigned(i_reg_331) + unsigned(ap_const_lv4_1));
    i_4_fu_487_p2 <= std_logic_vector(unsigned(i_i3_reg_286) + unsigned(ap_const_lv5_1));
    i_5_fu_552_p2 <= std_logic_vector(unsigned(i_i9_reg_297) + unsigned(ap_const_lv4_1));
    ip1Biases_address0 <= tmp_i_fu_414_p1(5 - 1 downto 0);

    ip1Biases_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            ip1Biases_ce0 <= ap_const_logic_1;
        else 
            ip1Biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ip1Output_address0_assign_proc : process(ip1Output_addr_reg_655, ap_CS_fsm_state11, ap_CS_fsm_state21, tmp_i5_fu_493_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then 
            ip1Output_address0 <= tmp_i5_fu_493_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            ip1Output_address0 <= ip1Output_addr_reg_655;
        else 
            ip1Output_address0 <= "XXXXX";
        end if; 
    end process;


    ip1Output_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state21)))) then 
            ip1Output_ce0 <= ap_const_logic_1;
        else 
            ip1Output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ip1Output_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)))) then 
            ip1Output_we0 <= ap_const_logic_1;
        else 
            ip1Output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ip1Weights_address0 <= tmp_35_cast_fu_476_p1(11 - 1 downto 0);

    ip1Weights_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            ip1Weights_ce0 <= ap_const_logic_1;
        else 
            ip1Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ip2Biases_address0 <= tmp_i1_fu_558_p1(4 - 1 downto 0);

    ip2Biases_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
            ip2Biases_ce0 <= ap_const_logic_1;
        else 
            ip2Biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ip2Weights_address0 <= tmp_39_cast_fu_620_p1(9 - 1 downto 0);

    ip2Weights_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            ip2Weights_ce0 <= ap_const_logic_1;
        else 
            ip2Weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_600_p2 <= std_logic_vector(unsigned(j_i1_reg_320) + unsigned(ap_const_lv5_1));
    j_fu_456_p2 <= std_logic_vector(unsigned(j_i_reg_275) + unsigned(ap_const_lv6_1));
    notlhs_fu_515_p2 <= "0" when (tmp_s_fu_501_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_521_p2 <= "1" when (tmp_32_fu_511_p1 = ap_const_lv23_0) else "0";
    outputVector_address0 <= tmp_reg_792(4 - 1 downto 0);

    outputVector_assign_1_address0_assign_proc : process(outputVector_assign_1_17_reg_741, ap_CS_fsm_state27, ap_CS_fsm_state37, tmp_fu_637_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state37))) then 
            outputVector_assign_1_address0 <= tmp_fu_637_p1(4 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            outputVector_assign_1_address0 <= outputVector_assign_1_17_reg_741;
        else 
            outputVector_assign_1_address0 <= "XXXX";
        end if; 
    end process;


    outputVector_assign_1_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state37)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state37)))) then 
            outputVector_assign_1_ce0 <= ap_const_logic_1;
        else 
            outputVector_assign_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outputVector_assign_1_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state27)))) then 
            outputVector_assign_1_we0 <= ap_const_logic_1;
        else 
            outputVector_assign_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outputVector_assign_s_fu_498_p1 <= ip1Output_load_reg_716;

    outputVector_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state38))) then 
            outputVector_ce0 <= ap_const_logic_1;
        else 
            outputVector_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outputVector_we0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state38)))) then 
            outputVector_we0 <= ap_const_logic_1;
        else 
            outputVector_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_ip1Output_load_fu_539_p3 <= 
        ap_const_lv32_0 when (tmp_28_fu_533_p2(0) = '1') else 
        ip1Output_load_reg_716;
    p_shl1_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_432_p3),12));
    p_shl2_cast_fu_572_p1 <= std_logic_vector(resize(unsigned(tmp_34_fu_564_p3),10));
    p_shl3_cast_fu_584_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_576_p3),10));
    p_shl_cast_fu_428_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_420_p3),12));

    pool1Output_0_address0_assign_proc : process(grp_conv2_fu_352_inputImage_0_address0, grp_pool1_fu_360_outputImage_0_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            pool1Output_0_address0 <= grp_pool1_fu_360_outputImage_0_address0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            pool1Output_0_address0 <= grp_conv2_fu_352_inputImage_0_address0;
        else 
            pool1Output_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    pool1Output_0_ce0_assign_proc : process(grp_conv2_fu_352_inputImage_0_ce0, grp_pool1_fu_360_outputImage_0_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            pool1Output_0_ce0 <= grp_pool1_fu_360_outputImage_0_ce0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            pool1Output_0_ce0 <= grp_conv2_fu_352_inputImage_0_ce0;
        else 
            pool1Output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool1Output_0_we0_assign_proc : process(grp_pool1_fu_360_outputImage_0_we0, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            pool1Output_0_we0 <= grp_pool1_fu_360_outputImage_0_we0;
        else 
            pool1Output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2Output_address0_assign_proc : process(ap_CS_fsm_state11, grp_pool2_fu_366_outputImage_address0, ap_CS_fsm_state8, tmp_4_i_fu_462_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            pool2Output_address0 <= tmp_4_i_fu_462_p1(6 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            pool2Output_address0 <= grp_pool2_fu_366_outputImage_address0;
        else 
            pool2Output_address0 <= "XXXXXX";
        end if; 
    end process;


    pool2Output_ce0_assign_proc : process(ap_CS_fsm_state11, grp_pool2_fu_366_outputImage_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            pool2Output_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            pool2Output_ce0 <= grp_pool2_fu_366_outputImage_ce0;
        else 
            pool2Output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2Output_we0_assign_proc : process(grp_pool2_fu_366_outputImage_we0, ap_CS_fsm_state8)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then 
            pool2Output_we0 <= grp_pool2_fu_366_outputImage_we0;
        else 
            pool2Output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    relu1Output_address0_assign_proc : process(tmp_i5_reg_706, ap_CS_fsm_state27, ap_CS_fsm_state24, tmp_1_i1_fu_606_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            relu1Output_address0 <= tmp_1_i1_fu_606_p1(5 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
            relu1Output_address0 <= tmp_i5_reg_706(5 - 1 downto 0);
        else 
            relu1Output_address0 <= "XXXXX";
        end if; 
    end process;


    relu1Output_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state24)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state27)) or ((ap_const_lv1_1 = ap_CS_fsm_state24)))) then 
            relu1Output_ce0 <= ap_const_logic_1;
        else 
            relu1Output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    relu1Output_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state24)))) then 
            relu1Output_we0 <= ap_const_logic_1;
        else 
            relu1Output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_i1_cast_fu_611_p1 <= std_logic_vector(resize(unsigned(j_i1_reg_320),10));
    tmp_1_i1_fu_606_p1 <= std_logic_vector(resize(unsigned(j_i1_reg_320),64));
    tmp_26_fu_527_p2 <= (notrhs_fu_521_p2 or notlhs_fu_515_p2);
    tmp_28_fu_533_p2 <= (tmp_26_fu_527_p2 and tmp_27_fu_386_p2);
    tmp_29_fu_420_p3 <= (i_i_reg_252 & ap_const_lv6_0);
    tmp_30_fu_432_p3 <= (i_i_reg_252 & ap_const_lv4_0);
    tmp_31_fu_444_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_428_p1) - unsigned(p_shl1_cast_fu_440_p1));
    tmp_32_fu_511_p1 <= outputVector_assign_s_fu_498_p1(23 - 1 downto 0);
    tmp_33_fu_471_p2 <= std_logic_vector(unsigned(tmp_31_reg_660) + unsigned(tmp_4_i_cast_fu_467_p1));
    tmp_34_fu_564_p3 <= (i_i9_reg_297 & ap_const_lv5_0);
        tmp_35_cast_fu_476_p1 <= std_logic_vector(resize(signed(tmp_33_fu_471_p2),64));

    tmp_35_fu_576_p3 <= (i_i9_reg_297 & ap_const_lv1_0);
    tmp_36_fu_588_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_572_p1) - unsigned(p_shl3_cast_fu_584_p1));
    tmp_37_fu_615_p2 <= std_logic_vector(unsigned(tmp_36_reg_746) + unsigned(tmp_1_i1_cast_fu_611_p1));
        tmp_39_cast_fu_620_p1 <= std_logic_vector(resize(signed(tmp_37_fu_615_p2),64));

    tmp_4_i_cast_fu_467_p1 <= std_logic_vector(resize(unsigned(j_i_reg_275),12));
    tmp_4_i_fu_462_p1 <= std_logic_vector(resize(unsigned(j_i_reg_275),64));
    tmp_fu_637_p1 <= std_logic_vector(resize(unsigned(i_reg_331),64));
    tmp_i1_fu_558_p1 <= std_logic_vector(resize(unsigned(i_i9_reg_297),64));
    tmp_i5_fu_493_p1 <= std_logic_vector(resize(unsigned(i_i3_reg_286),64));
    tmp_i_fu_414_p1 <= std_logic_vector(resize(unsigned(i_i_reg_252),64));
    tmp_s_fu_501_p4 <= outputVector_assign_s_fu_498_p1(30 downto 23);
end behav;
