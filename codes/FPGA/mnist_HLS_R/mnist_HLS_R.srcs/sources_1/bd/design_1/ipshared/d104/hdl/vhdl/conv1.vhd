-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImage_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputImage_ce0 : OUT STD_LOGIC;
    inputImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputImage_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    outputImage_0_ce0 : OUT STD_LOGIC;
    outputImage_0_we0 : OUT STD_LOGIC;
    outputImage_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_BF981165 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100110000001000101100101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv1Filters_0_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv1Filters_0_0_ce0 : STD_LOGIC;
    signal conv1Filters_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_211_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_384 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_6_fu_223_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_392 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_229_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_reg_397 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_4_fu_243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_4_reg_405 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outputImage_0_addr_reg_410 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_264_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_reg_415 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_4_fu_282_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_4_reg_423 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_55_cast_fu_296_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_cast_reg_428 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_329_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_47_reg_433 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_2_fu_345_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_2_reg_441 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal j_reg_95 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_118 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal a_phi_fu_146_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_141 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_166 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal c_reg_189 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_cast_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_13_cast_fu_249_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_288_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_cast4_fu_272_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_300_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_45_fu_305_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_fu_317_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_325_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_cast_fu_351_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_48_fu_355_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_cast2_fu_335_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_cast_fu_370_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_374_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component mnist_fadd_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_fmul_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv1_conv1Filterbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv1Filters_0_0_U : component conv1_conv1Filterbkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1Filters_0_0_address0,
        ce0 => conv1Filters_0_0_ce0,
        q0 => conv1Filters_0_0_q0);

    mnist_fadd_32ns_3cud_U1 : component mnist_fadd_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_21_reg_177,
        din1 => tmp_25_reg_466,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p2);

    mnist_fmul_32ns_3dEe_U2 : component mnist_fmul_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv1Filters_0_0_q0,
        din1 => inputImage_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    a_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond1_fu_276_p2)))) then 
                a_reg_141 <= ap_const_lv1_1;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_237_p2))) then 
                a_reg_141 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    b_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = a_phi_fu_146_p4))) then 
                b_reg_166 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond_fu_339_p2)))) then 
                b_reg_166 <= b_4_reg_423;
            end if; 
        end if;
    end process;

    c_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then 
                c_reg_189 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                c_reg_189 <= c_2_reg_441;
            end if; 
        end if;
    end process;

    j_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond3_fu_237_p2)))) then 
                j_reg_95 <= j_6_reg_392;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_95 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = a_phi_fu_146_p4)))) then 
                k_reg_118 <= k_4_reg_405;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond4_fu_217_p2 = ap_const_lv1_0))) then 
                k_reg_118 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond3_fu_237_p2)))) then 
                phi_mul_reg_106 <= next_mul_reg_384;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_106 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    tmp_15_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond1_fu_276_p2)))) then 
                tmp_15_reg_129 <= tmp_17_reg_154;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_237_p2))) then 
                tmp_15_reg_129 <= ap_const_lv32_BF981165;
            end if; 
        end if;
    end process;

    tmp_17_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = a_phi_fu_146_p4))) then 
                tmp_17_reg_154 <= tmp_15_reg_129;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond_fu_339_p2)))) then 
                tmp_17_reg_154 <= tmp_21_reg_177;
            end if; 
        end if;
    end process;

    tmp_21_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then 
                tmp_21_reg_177 <= tmp_17_reg_154;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                tmp_21_reg_177 <= tmp_26_reg_471;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                b_4_reg_423 <= b_4_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                c_2_reg_441 <= c_2_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                j_6_reg_392 <= j_6_fu_223_p2;
                next_mul_reg_384 <= next_mul_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                k_4_reg_405 <= k_4_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_237_p2))) then
                outputImage_0_addr_reg_410 <= tmp_53_cast_fu_259_p1(8 - 1 downto 0);
                    tmp_14_reg_415(4 downto 1) <= tmp_14_fu_264_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond4_fu_217_p2 = ap_const_lv1_0))) then
                    tmp_12_reg_397(4 downto 1) <= tmp_12_fu_229_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                tmp_25_reg_466 <= grp_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                tmp_26_reg_471 <= grp_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_276_p2))) then
                    tmp_47_reg_433(10 downto 2) <= tmp_47_fu_329_p2(10 downto 2);
                    tmp_55_cast_reg_428(4 downto 2) <= tmp_55_cast_fu_296_p1(4 downto 2);
            end if;
        end if;
    end process;
    tmp_12_reg_397(0) <= '0';
    tmp_14_reg_415(0) <= '0';
    tmp_55_cast_reg_428(1 downto 0) <= "00";
    tmp_55_cast_reg_428(5) <= '0';
    tmp_47_reg_433(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_217_p2, exitcond3_fu_237_p2, exitcond1_fu_276_p2, exitcond_fu_339_p2, a_phi_fu_146_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond4_fu_217_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_237_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = a_phi_fu_146_p4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_276_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond_fu_339_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_phi_fu_146_p4 <= a_reg_141;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_217_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond4_fu_217_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_217_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond4_fu_217_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_4_fu_282_p2 <= std_logic_vector(unsigned(b_reg_166) + unsigned(ap_const_lv3_1));
    b_cast4_fu_272_p1 <= std_logic_vector(resize(unsigned(b_reg_166),5));
    c_2_fu_345_p2 <= std_logic_vector(unsigned(c_reg_189) + unsigned(ap_const_lv3_1));
    c_cast2_fu_335_p1 <= std_logic_vector(resize(unsigned(c_reg_189),5));
    conv1Filters_0_0_address0 <= tmp_59_cast_fu_360_p1(4 - 1 downto 0);

    conv1Filters_0_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            conv1Filters_0_0_ce0 <= ap_const_logic_1;
        else 
            conv1Filters_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_276_p2 <= "1" when (b_reg_166 = ap_const_lv3_4) else "0";
    exitcond3_fu_237_p2 <= "1" when (k_reg_118 = ap_const_lv4_D) else "0";
    exitcond4_fu_217_p2 <= "1" when (j_reg_95 = ap_const_lv4_D) else "0";
    exitcond_fu_339_p2 <= "1" when (c_reg_189 = ap_const_lv3_4) else "0";
    inputImage_address0 <= tmp_60_cast_fu_379_p1(10 - 1 downto 0);

    inputImage_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            inputImage_ce0 <= ap_const_logic_1;
        else 
            inputImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_6_fu_223_p2 <= std_logic_vector(unsigned(j_reg_95) + unsigned(ap_const_lv4_1));
    k_4_fu_243_p2 <= std_logic_vector(unsigned(k_reg_118) + unsigned(ap_const_lv4_1));
    next_mul_fu_211_p2 <= std_logic_vector(unsigned(phi_mul_reg_106) + unsigned(ap_const_lv8_D));

    outputImage_0_address0_assign_proc : process(ap_CS_fsm_state3, outputImage_0_addr_reg_410, ap_CS_fsm_state16, tmp_53_cast_fu_259_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            outputImage_0_address0 <= outputImage_0_addr_reg_410;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            outputImage_0_address0 <= tmp_53_cast_fu_259_p1(8 - 1 downto 0);
        else 
            outputImage_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    outputImage_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            outputImage_0_ce0 <= ap_const_logic_1;
        else 
            outputImage_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outputImage_0_d0_assign_proc : process(ap_CS_fsm_state3, tmp_26_reg_471, ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            outputImage_0_d0 <= tmp_26_reg_471;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            outputImage_0_d0 <= ap_const_lv32_BF981165;
        else 
            outputImage_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputImage_0_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_237_p2, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond3_fu_237_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            outputImage_0_we0 <= ap_const_logic_1;
        else 
            outputImage_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_325_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_317_p3),11));
    p_shl_cast_fu_313_p1 <= std_logic_vector(resize(unsigned(tmp_45_fu_305_p3),11));
    tmp_12_fu_229_p3 <= (j_reg_95 & ap_const_lv1_0);
    tmp_13_cast_fu_249_p1 <= std_logic_vector(resize(unsigned(k_reg_118),8));
    tmp_14_fu_264_p3 <= (k_reg_118 & ap_const_lv1_0);
    tmp_19_fu_300_p2 <= std_logic_vector(unsigned(b_cast4_fu_272_p1) + unsigned(tmp_12_reg_397));
    tmp_22_cast_fu_351_p1 <= std_logic_vector(resize(unsigned(c_reg_189),6));
    tmp_23_fu_365_p2 <= std_logic_vector(unsigned(c_cast2_fu_335_p1) + unsigned(tmp_14_reg_415));
    tmp_24_cast_fu_370_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_365_p2),11));
    tmp_44_fu_288_p3 <= (b_reg_166 & ap_const_lv2_0);
    tmp_45_fu_305_p3 <= (tmp_19_fu_300_p2 & ap_const_lv5_0);
    tmp_46_fu_317_p3 <= (tmp_19_fu_300_p2 & ap_const_lv2_0);
    tmp_47_fu_329_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_313_p1) - unsigned(p_shl1_cast_fu_325_p1));
    tmp_48_fu_355_p2 <= std_logic_vector(unsigned(tmp_55_cast_reg_428) + unsigned(tmp_22_cast_fu_351_p1));
    tmp_49_fu_374_p2 <= std_logic_vector(unsigned(tmp_47_reg_433) + unsigned(tmp_24_cast_fu_370_p1));
    tmp_53_cast_fu_259_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_253_p2),64));
    tmp_55_cast_fu_296_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_288_p3),6));
    tmp_59_cast_fu_360_p1 <= std_logic_vector(resize(unsigned(tmp_48_fu_355_p2),64));
        tmp_60_cast_fu_379_p1 <= std_logic_vector(resize(signed(tmp_49_fu_374_p2),64));

    tmp_s_fu_253_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_249_p1) + unsigned(phi_mul_reg_106));
end behav;
