-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputImage_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    inputImage_0_ce0 : OUT STD_LOGIC;
    inputImage_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outputImage_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    outputImage_ce0 : OUT STD_LOGIC;
    outputImage_we0 : OUT STD_LOGIC;
    outputImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_BE609417 : STD_LOGIC_VECTOR (31 downto 0) := "10111110011000001001010000010111";
    constant ap_const_lv32_BED61A33 : STD_LOGIC_VECTOR (31 downto 0) := "10111110110101100001101000110011";
    constant ap_const_lv32_BEC087AD : STD_LOGIC_VECTOR (31 downto 0) := "10111110110000001000011110101101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv2Filters_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv2Filters_0_ce0 : STD_LOGIC;
    signal conv2Filters_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_185_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_6_reg_385 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_40_cast_fu_199_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_40_cast_reg_390 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond5_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_cast_fu_211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_cast_reg_395 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_3_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_403 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_45_cast_fu_236_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_cast_reg_408 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_250_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_416 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_29_fu_256_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputImage_addr_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_3_fu_293_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_3_reg_434 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_49_cast_fu_308_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_49_cast_reg_439 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_326_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_reg_444 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_1_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_452 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_reg_88 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_reg_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal c_reg_157 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_46_cast_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_fu_191_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_203_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_227_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_231_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_269_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_fu_273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_299_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_fu_303_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_cast_fu_283_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_316_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_41_fu_326_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_cast_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_fu_352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_cast_fu_332_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_cast_fu_368_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_326_p00 : STD_LOGIC_VECTOR (6 downto 0);

    component mnist_fadd_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_fmul_32ns_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_mux_32_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2_conv2FilterfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv2Filters_0_U : component conv2_conv2FilterfYi
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2Filters_0_address0,
        ce0 => conv2Filters_0_ce0,
        q0 => conv2Filters_0_q0);

    mnist_fadd_32ns_3cud_x_U9 : component mnist_fadd_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_145,
        din1 => tmp_10_reg_477,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    mnist_fmul_32ns_3dEe_x_U10 : component mnist_fmul_32ns_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv2Filters_0_q0,
        din1 => inputImage_0_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    mnist_mux_32_32_1_U11 : component mnist_mux_32_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => ap_const_lv32_BE609417,
        din2 => ap_const_lv32_BED61A33,
        din3 => ap_const_lv32_BEC087AD,
        din4 => i_reg_88,
        dout => tmp_29_fu_256_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond_fu_336_p2)))) then 
                b_reg_134 <= b_3_reg_434;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_244_p2))) then 
                b_reg_134 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_287_p2))) then 
                c_reg_157 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                c_reg_157 <= c_1_reg_452;
            end if; 
        end if;
    end process;

    i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond4_fu_215_p2)))) then 
                i_reg_88 <= i_6_reg_385;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_88 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond3_fu_244_p2)))) then 
                j_reg_100 <= j_3_reg_403;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond5_fu_179_p2 = ap_const_lv1_0))) then 
                j_reg_100 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not((ap_const_lv1_0 = exitcond1_fu_287_p2)))) then 
                k_reg_112 <= k_2_reg_416;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_215_p2))) then 
                k_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_4_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6) and not((ap_const_lv1_0 = exitcond_fu_336_p2)))) then 
                tmp_4_reg_124 <= tmp_9_reg_145;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_244_p2))) then 
                tmp_4_reg_124 <= tmp_29_fu_256_p5;
            end if; 
        end if;
    end process;

    tmp_9_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_287_p2))) then 
                tmp_9_reg_145 <= tmp_4_reg_124;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                tmp_9_reg_145 <= tmp_11_reg_482;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                b_3_reg_434 <= b_3_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then
                c_1_reg_452 <= c_1_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_6_reg_385 <= i_6_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                j_3_reg_403 <= j_3_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                k_2_reg_416 <= k_2_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_244_p2))) then
                outputImage_addr_reg_426 <= tmp_46_cast_fu_278_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                tmp_10_reg_477 <= grp_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                tmp_11_reg_482 <= grp_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond5_fu_179_p2 = ap_const_lv1_0))) then
                    tmp_40_cast_reg_390(4 downto 3) <= tmp_40_cast_fu_199_p1(4 downto 3);
                    tmp_42_cast_reg_395(3 downto 2) <= tmp_42_cast_fu_211_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_287_p2))) then
                tmp_41_reg_444 <= tmp_41_fu_326_p2;
                    tmp_49_cast_reg_439(6 downto 2) <= tmp_49_cast_fu_308_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_215_p2))) then
                    tmp_45_cast_reg_408(8 downto 3) <= tmp_45_cast_fu_236_p3(8 downto 3);
            end if;
        end if;
    end process;
    tmp_40_cast_reg_390(2 downto 0) <= "000";
    tmp_40_cast_reg_390(5) <= '0';
    tmp_42_cast_reg_395(1 downto 0) <= "00";
    tmp_42_cast_reg_395(4) <= '0';
    tmp_45_cast_reg_408(2 downto 0) <= "000";
    tmp_49_cast_reg_439(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_fu_179_p2, exitcond4_fu_215_p2, exitcond3_fu_244_p2, exitcond1_fu_287_p2, exitcond_fu_336_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond5_fu_179_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_215_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_244_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_287_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (not((ap_const_lv1_0 = exitcond_fu_336_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_179_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond5_fu_179_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_179_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond5_fu_179_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_3_fu_293_p2 <= std_logic_vector(unsigned(b_reg_134) + unsigned(ap_const_lv3_1));
    b_cast_fu_283_p1 <= std_logic_vector(resize(unsigned(b_reg_134),4));
    c_1_fu_342_p2 <= std_logic_vector(unsigned(c_reg_157) + unsigned(ap_const_lv3_1));
    c_cast_fu_332_p1 <= std_logic_vector(resize(unsigned(c_reg_157),4));
    conv2Filters_0_address0 <= tmp_51_cast_fu_357_p1(6 - 1 downto 0);

    conv2Filters_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            conv2Filters_0_ce0 <= ap_const_logic_1;
        else 
            conv2Filters_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_287_p2 <= "1" when (b_reg_134 = ap_const_lv3_4) else "0";
    exitcond3_fu_244_p2 <= "1" when (k_reg_112 = ap_const_lv4_8) else "0";
    exitcond4_fu_215_p2 <= "1" when (j_reg_100 = ap_const_lv4_8) else "0";
    exitcond5_fu_179_p2 <= "1" when (i_reg_88 = ap_const_lv2_3) else "0";
    exitcond_fu_336_p2 <= "1" when (c_reg_157 = ap_const_lv3_4) else "0";
    i_6_fu_185_p2 <= std_logic_vector(unsigned(i_reg_88) + unsigned(ap_const_lv2_1));
    inputImage_0_address0 <= tmp_52_cast_fu_377_p1(7 - 1 downto 0);

    inputImage_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state6))) then 
            inputImage_0_ce0 <= ap_const_logic_1;
        else 
            inputImage_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_3_fu_221_p2 <= std_logic_vector(unsigned(j_reg_100) + unsigned(ap_const_lv4_1));
    k_2_fu_250_p2 <= std_logic_vector(unsigned(k_reg_112) + unsigned(ap_const_lv4_1));

    outputImage_address0_assign_proc : process(ap_CS_fsm_state4, outputImage_addr_reg_426, ap_CS_fsm_state16, tmp_46_cast_fu_278_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            outputImage_address0 <= outputImage_addr_reg_426;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            outputImage_address0 <= tmp_46_cast_fu_278_p1(8 - 1 downto 0);
        else 
            outputImage_address0 <= "XXXXXXXX";
        end if; 
    end process;


    outputImage_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            outputImage_ce0 <= ap_const_logic_1;
        else 
            outputImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outputImage_d0_assign_proc : process(ap_CS_fsm_state4, tmp_29_fu_256_p5, tmp_11_reg_482, ap_CS_fsm_state16)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            outputImage_d0 <= tmp_11_reg_482;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            outputImage_d0 <= tmp_29_fu_256_p5;
        else 
            outputImage_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outputImage_we0_assign_proc : process(ap_CS_fsm_state4, exitcond3_fu_244_p2, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_244_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            outputImage_we0 <= ap_const_logic_1;
        else 
            outputImage_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_cast_fu_348_p1 <= std_logic_vector(resize(unsigned(c_reg_157),7));
    tmp_2_fu_362_p2 <= std_logic_vector(unsigned(c_cast_fu_332_p1) + unsigned(k_reg_112));
    tmp_38_fu_231_p2 <= std_logic_vector(unsigned(tmp_cast_fu_227_p1) + unsigned(tmp_40_cast_reg_390));
    tmp_39_fu_273_p2 <= std_logic_vector(unsigned(tmp_45_cast_reg_408) + unsigned(tmp_7_cast_fu_269_p1));
    tmp_3_cast_fu_368_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_362_p2),7));
    tmp_40_cast_fu_199_p1 <= std_logic_vector(resize(unsigned(tmp_fu_191_p3),6));
    tmp_40_fu_303_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_299_p1) + unsigned(tmp_42_cast_reg_395));
    tmp_41_fu_326_p0 <= tmp_41_fu_326_p00(4 - 1 downto 0);
    tmp_41_fu_326_p00 <= std_logic_vector(resize(unsigned(tmp_6_fu_316_p2),7));
    tmp_41_fu_326_p2 <= std_logic_vector(resize(unsigned(tmp_41_fu_326_p0) * unsigned(ap_const_lv7_B), 7));
    tmp_42_cast_fu_211_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_203_p3),5));
    tmp_42_fu_352_p2 <= std_logic_vector(unsigned(tmp_49_cast_reg_439) + unsigned(tmp_1_cast_fu_348_p1));
    tmp_43_fu_372_p2 <= std_logic_vector(unsigned(tmp_41_reg_444) + unsigned(tmp_3_cast_fu_368_p1));
    tmp_45_cast_fu_236_p3 <= (tmp_38_fu_231_p2 & ap_const_lv3_0);
    tmp_46_cast_fu_278_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_273_p2),64));
    tmp_49_cast_fu_308_p3 <= (tmp_40_fu_303_p2 & ap_const_lv2_0);
    tmp_51_cast_fu_357_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_352_p2),64));
    tmp_52_cast_fu_377_p1 <= std_logic_vector(resize(unsigned(tmp_43_fu_372_p2),64));
    tmp_5_cast_fu_299_p1 <= std_logic_vector(resize(unsigned(b_reg_134),5));
    tmp_6_fu_316_p2 <= std_logic_vector(unsigned(j_reg_100) + unsigned(b_cast_fu_283_p1));
    tmp_7_cast_fu_269_p1 <= std_logic_vector(resize(unsigned(k_reg_112),9));
    tmp_cast_fu_227_p1 <= std_logic_vector(resize(unsigned(j_reg_100),6));
    tmp_fu_191_p3 <= (i_reg_88 & ap_const_lv3_0);
    tmp_s_fu_203_p3 <= (i_reg_88 & ap_const_lv2_0);
end behav;
